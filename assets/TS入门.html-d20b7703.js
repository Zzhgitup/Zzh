import{_ as s,o as n,c as a,e as l}from"./app-bebbc25d.js";const e={},p=l(`<h3 id="tsconfig-json-配置" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-配置" aria-hidden="true">#</a> tsconfig.json 配置</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 编译路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   **表示文件夹下的所有文件夹，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   *表示文件夹下的所有文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;include&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./src/**/*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/* 排除路径 不参加编译的文件路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	默认值[”node_modules“,&quot;bower_components&quot;,&quot;jspm_packages&quot;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;exclude&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./hellow/**/*&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="compileroptions-配置选项" tabindex="-1"><a class="header-anchor" href="#compileroptions-配置选项" aria-hidden="true">#</a> compilerOptions 配置选项</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	compilerOptions编译器选项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#98C379;">&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//target 用来指定TS被编译的ES的版本</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es3&#39;, &#39;es5&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es2016&#39;, &#39;es2017&#39;, &#39;es2018&#39;, &#39;es2019&#39;, &#39;es2020&#39;, &#39;es2021&#39;, &#39;es2022&#39;, &#39;esnext&#39;.</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;target&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ES2015&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//module</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;none&#39;, &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es2020&#39;, &#39;es2022&#39;, &#39;esnext&#39;, &#39;node16&#39;, &#39;nodenext&#39;.</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;module&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ES2015&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//lib用来指定使用的库</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//option must be:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es5&#39;, &#39;es6&#39;, &#39;es2015&#39;, &#39;es7&#39;, &#39;es2016&#39;, &#39;es2017&#39;, &#39;es2018&#39;, &#39;es2019&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2020&#39;, &#39;es2021&#39;, &#39;es2022&#39;, &#39;es2023&#39;, &#39;esnext&#39;, &#39;dom&#39;, &#39;dom.iterable&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;webworker&#39;, &#39;webworker.importscripts&#39;, &#39;webworker.iterable&#39;, &#39;scripthost&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2015.core&#39;, &#39;es2015.collection&#39;, &#39;es2015.generator&#39;, &#39;es2015.iterable&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2015.promise&#39;, &#39;es2015.proxy&#39;, &#39;es2015.reflect&#39;, &#39;es2015.symbol&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2015.symbol.wellknown&#39;, &#39;es2016.array.include&#39;, &#39;es2017.object&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2017.sharedmemory&#39;, &#39;es2017.string&#39;, &#39;es2017.intl&#39;, &#39;es2017.typedarrays&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// &#39;es2018.asyncgenerator&#39;, &#39;es2018.asynciterable&#39;, &#39;es2018.intl&#39;, &#39;es2018.promise&#39;, &#39;es2018.regexp&#39;, &#39;es2019.array&#39;, &#39;es2019.object&#39;, &#39;es2019.string&#39;, &#39;es2019.symbol&#39;, &#39;es2019.intl&#39;, &#39;es2020.bigint&#39;, &#39;es2020.date&#39;, &#39;es2020.promise&#39;, &#39;es2020.sharedmemory&#39;, &#39;es2020.string&#39;, &#39;es2020.symbol.wellknown&#39;, &#39;es2020.intl&#39;, &#39;es2020.number&#39;, &#39;es2021.promise&#39;, &#39;es2021.string&#39;, &#39;es2021.weakref&#39;, &#39;es2021.intl&#39;, &#39;es2022.array&#39;, &#39;es2022.error&#39;, &#39;es2022.intl&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//&#39;es2022.object&#39;, &#39;es2022.sharedmemory&#39;, &#39;es2022.string&#39;, &#39;es2022.regexp&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// &#39;es2023.array&#39;, &#39;esnext.array&#39;, &#39;esnext.symbol&#39;, &#39;esnext.asynciterable&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// &#39;esnext.intl&#39;, &#39;esnext.bigint&#39;, &#39;esnext.string&#39;, &#39;esnext.promise&#39;, &#39;esnext.weakref&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// &#39;decorators&#39;, &#39;decorators.legacy&#39;.</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">/* &quot;lib&quot;: [&quot;12&quot;] */</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//outDir 用来指定编译后文件所在目录</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;outDir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./dist&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//outFile 将代码合并为一个文件</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//设置outfile后，所有的全局代码合并到一个文件中</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//但是只支持system,amd</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">/* &quot;outFile&quot;: &quot;./dist/app.js&quot; */</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//allowJs 是否对JS文件进行编译</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;allowJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//checkJs  是否检查JS代码符合语法规范</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;checkJs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//removeComments 是否移除注释</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;removeComments&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// 不生成编译后产生的JS文件</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;noEmit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//noEmitOnError 当有错误时不生成编译后文件</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;noEmitOnError&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//alwaysStrict 用来设置编译后的文件是否使用严格模式</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;alwaysStrict&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//noImplicitAny 不允许隐式的any类型</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;noImplicitAny&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//noImplicitThis 不允许指向不明的this</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;noImplicitThis&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// strictNullChecks严格检查空值</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;strictNullChecks&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">//strict 严格检查的总开关</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;strict&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型-generic" tabindex="-1"><a class="header-anchor" href="#泛型-generic" aria-hidden="true">#</a> 泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，test 函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的：</p><p>首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><h3 id="泛型函数" tabindex="-1"><a class="header-anchor" href="#泛型函数" aria-hidden="true">#</a> 泛型函数</h3><h4 id="创建泛型函数" tabindex="-1"><a class="header-anchor" href="#创建泛型函数" aria-hidden="true">#</a> 创建泛型函数</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>&lt;T&gt;</code>就是泛型；</p><p>T 是我们给这个类型起的名字（不一定非叫 T），设置泛型后即可在函数中使用 T 来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p><h4 id="使用泛型函数" tabindex="-1"><a class="header-anchor" href="#使用泛型函数" aria-hidden="true">#</a> 使用泛型函数</h4><h5 id="方式一-直接使用" tabindex="-1"><a class="header-anchor" href="#方式一-直接使用" aria-hidden="true">#</a> 方式一（直接使用）：</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用时可以直接传递参数使用，类型会由 TS 自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><h5 id="方式二-指定类型" tabindex="-1"><a class="header-anchor" href="#方式二-指定类型" aria-hidden="true">#</a> 方式二（指定类型）：</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在函数后手动指定泛型；</p><h4 id="函数中声明多个泛型" tabindex="-1"><a class="header-anchor" href="#函数中声明多个泛型" aria-hidden="true">#</a> 函数中声明多个泛型</h4><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类" aria-hidden="true">#</a> 泛型类</h3><p>类中同样可以使用泛型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyClass</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型继承" tabindex="-1"><a class="header-anchor" href="#泛型继承" aria-hidden="true">#</a> 泛型继承</h3><p>除此之外，也可以对泛型的范围进行约束</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyInter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MyInter</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 T extends MyInter 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用；</p>`,37),o=[p];function t(c,i){return n(),a("div",null,o)}const B=s(e,[["render",t],["__file","TS入门.html.vue"]]);export{B as default};
