import{_ as t,o as r,c as e,f as p,e as o}from"./app-bebbc25d.js";const n={},_=o("<p>在 HTML 文档中元素默认是在文档流中的，在文档流中块级元素会独占一行从上至下排列，而内联元素，所谓的行内元素，指的是只占自身大小的元素，不会占用一行</p><p>行内元素有：a b span img input select strong（强调的语气）<br> 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</p><p><strong>首先什么是高度坍塌？</strong></p><p>在文档流中，父元素的高度默认是被子元素撑开的。</p><p>也就是子元素多高，父元素多高。</p><p>但是当子元素设置浮动时，子元素会脱离文档流</p><p>此时将会导致子元素无法撑起父元素的高度造成父元素塌陷，则父元素下的所有元素都会上移这样导致页面布局混乱。</p><p>解决办法有好几种，但是某些办法有局限性。在不同浏览器中也会出现不兼容的问题</p><p>**一.**把浮动元素所在盒子的高度定死，设置一个不可变的高度。这样容易出现内容溢出的问题。造成布局混乱</p><p><strong>二</strong>、开启 BFC 属性<br> 根据 W3C 的标准，在我们的页面中元素都有一个隐含的属性叫做“Block Formatting Context”，简称 BFC，该属性可以设置打开或者关闭，默认是关闭的。当我们开启元素的 BFC 以后，元素会具有以下特性：<br> 1.父元素的垂直外边距不会和子元素重叠<br> 2.开启 BFC 的元素不会被浮动元素覆盖<br> 3.开启 BFC 的元素可以包含浮动的子元素<br> 如何开启元素的 BFC：<br> 1.设置元素的浮动：  这种方式开启虽然可以撑开父元素，但是会导致父元素的宽度丢失，而且这种方式也会导致下边的元素上移，不能解决问题。<br> 2.设置元素的绝对定位</p><p>3.将我们元素的 overflow 设置为 hidden 是副作用最小的开启 BFC 的方式。</p><p><strong>三</strong>、可以直接在高度塌陷的父元素的最后，添加一个空白的 div<br> 由于添加的 div 并没有浮动，所以他是可以撑开父元素的高度的，再对其进行清除浮动，可以通过空白的 div 来撑开父元素的高度，基本没有副作用。使用这种方式，虽然可以解决问题，但是会在页面中添加多余的结构</p><p>**四、**通过 after 伪类来选中父元素的后面<br> 可以通过 after 伪类向元素的的最后添加一个空白的块元素，然后对其清除浮动，这样做和添加 div 的原理一样，可以达到相同的效果，而且不会再页面中添加多余的 div，最为推荐使用的方式，几乎没有副作用</p>",13);function s(c,d){return r(),e("div",null,[p("more"),_])}const i=t(n,[["render",s],["__file","高度塌陷问题的解决办法.html.vue"]]);export{i as default};
