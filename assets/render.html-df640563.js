const s=JSON.parse('{"key":"v-db54a782","path":"/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/render.html","title":"vue3源码本码-render","lang":"zh-CN","frontmatter":{"title":"vue3源码本码-render","date":"2023-03-04T20:30:14.000Z","icon":"blog","tag":["Vue"],"category":["源码"],"description":"import { ShapeFlags } from \\"@mini-vue/shared\\"; import { createComponentInstance } from \\"./component\\"; import { queueJob } from \\"./scheduler\\"; import { effect } from \\"@mini-vue/reactivity\\"; import { setupComponent } from \\"./component\\"; import { Fragment, normalizeVNode, Text } from \\"./vnode\\"; import { shouldUpdateComponent } from \\"./componentRenderUtils\\"; import { createAppAPI } from \\"./createApp\\"; export function createRenderer(options) { const { createElement: hostCreateElement, setElementText: hostSetElementText, patchProp: hostPatchProp, insert: hostInsert, remove: hostRemove, setText: hostSetText, createText: hostCreateText, } = options; const render = (vnode, container) =&gt; { console.log(\\"调用 patch\\") patch(null, vnode, container); }; function patch( n1, n2, container = null, anchor = null, parentComponent = null ) { // 基于 n2 的类型来判断 // 因为 n2 是新的 vnode const { type, shapeFlag } = n2; switch (type) { case Text: processText(n1, n2, container); break; // 其中还有几个类型比如： static fragment comment case Fragment: processFragment(n1, n2, container); break; default: // 这里就基于 shapeFlag 来处理 if (shapeFlag &amp; ShapeFlags.ELEMENT) { console.log(\\"处理 element\\"); processElement(n1, n2, container, anchor, parentComponent); } else if (shapeFlag &amp; ShapeFlags.STATEFUL_COMPONENT) { console.log(\\"处理 component\\"); processComponent(n1, n2, container, parentComponent); } } } function processFragment(n1: any, n2: any, container: any) { // 只需要渲染 children ，然后给添加到 container 内 if (!n1) { // 初始化 Fragment 逻辑点 console.log(\\"初始化 Fragment 类型的节点\\"); mountChildren(n2.children, container); } } function processText(n1, n2, container) { console.log(\\"处理 Text 节点\\"); if (n1 === null) { // n1 是 null 说明是 init 的阶段 // 基于 createText 创建出 text 节点，然后使用 insert 添加到 el 内 console.log(\\"初始化 Text 类型的节点\\"); hostInsert((n2.el = hostCreateText(n2.children as string)), container); } else { // update // 先对比一下 updated 之后的内容是否和之前的不一样 // 在不一样的时候才需要 update text // 这里抽离出来的接口是 setText // 注意，这里一定要记得把 n1.el 赋值给 n2.el, 不然后续是找不到值的 const el = (n2.el = n1.el!); if (n2.children !== n1.children) { console.log(\\"更新 Text 类型的节点\\"); hostSetText(el, n2.children as string); } } } function processElement(n1, n2, container, anchor, parentComponent) { if (!n1) { mountElement(n2, container, anchor); } else { // todo updateElement(n1, n2, container, anchor, parentComponent); } } function updateElement(n1, n2, container, anchor, parentComponent) { const oldProps = (n1 &amp;&amp; n1.props) || {}; const newProps = n2.props || {}; // 应该更新 element console.log(\\"应该更新 element\\"); console.log(\\"旧的 vnode\\", n1); console.log(\\"新的 vnode\\", n2); // 需要把 el 挂载到新的 vnode const el = (n2.el = n1.el); // 对比 props patchProps(el, oldProps, newProps); // 对比 children patchChildren(n1, n2, el, anchor, parentComponent); } function patchProps(el, oldProps, newProps) { // 对比 props 有以下几种情况 // 1. oldProps 有，newProps 也有，但是 val 值变更了 // 举个栗子 // 之前: oldProps.id = 1 ，更新后：newProps.id = 2 // key 存在 oldProps 里 也存在 newProps 内 // 以 newProps 作为基准 for (const key in newProps) { const prevProp = oldProps[key]; const nextProp = newProps[key]; if (prevProp !== nextProp) { // 对比属性 // 需要交给 host 来更新 key hostPatchProp(el, key, prevProp, nextProp); } } // 2. oldProps 有，而 newProps 没有了 // 之前： {id:1,tId:2} 更新后： {id:1} // 这种情况下我们就应该以 oldProps 作为基准，因为在 newProps 里面是没有的 tId 的 // \\b还需要注意一点，如果这个 key 在 newProps 里面已经存在了，说明已经处理过了，就不要在处理了 for (const key in oldProps) { const prevProp = oldProps[key]; const nextProp = null; if (!(key in newProps)) { // 这里是以 oldProps 为基准来遍历， // 而且得到的值是 newProps 内没有的 // 所以交给 host 更新的时候，把新的值设置为 null hostPatchProp(el, key, prevProp, nextProp); } } } function patchChildren(n1, n2, container, anchor, parentComponent) { const { shapeFlag: prevShapeFlag, children: c1 } = n1; const { shapeFlag, children: c2 } = n2; // 如果 n2 的 children 是 text 类型的话 // 就看看和之前的 n1 的 children 是不是一样的 // 如果不一样的话直接重新设置一下 text 即可 if (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { if (c2 !== c1) { console.log(\\"类型为 text_children, 当前需要更新\\"); hostSetElementText(container, c2 as string); } } else { // 看看之前的是不是 text if (prevShapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { // 先清空 // 然后在把新的 children 给 mount 生成 element hostSetElementText(container, \\"\\"); mountChildren(c2, container); } else { // array diff array // 如果之前是 array_children // 现在还是 array_children 的话 // 那么我们就需要对比两个 children 啦 patchKeyedChildren(c1, c2, container, parentComponent, anchor); } } } function patchKeyedChildren( c1: any[], c2: any[], container, parentAnchor, parentComponent ) { let i = 0; const l2 = c2.length; let e1 = c1.length - 1; let e2 = l2 - 1; const isSameVNodeType = (n1, n2) =&gt; { return n1.type === n2.type &amp;&amp; n1.key === n2.key; }; while (i &lt;= e1 &amp;&amp; i &lt;= e2) { const prevChild = c1[i]; const nextChild = c2[i]; if (!isSameVNodeType(prevChild, nextChild)) { console.log(\\"两个 child 不相等(从左往右比对)\\"); console.log(`prevChild:${prevChild}`); console.log(`nextChild:${nextChild}`); break; } console.log(\\"两个 child 相等，接下来对比这两个 child 节点(从左往右比对)\\"); patch(prevChild, nextChild, container, parentAnchor, parentComponent); i++; } while (i &lt;= e1 &amp;&amp; i &lt;= e2) { // 从右向左取值 const prevChild = c1[e1]; const nextChild = c2[e2]; if (!isSameVNodeType(prevChild, nextChild)) { console.log(\\"两个 child 不相等(从右往左比对)\\"); console.log(`prevChild:${prevChild}`); console.log(`nextChild:${nextChild}`); break; } console.log(\\"两个 child 相等，接下来对比这两个 child 节点(从右往左比对)\\"); patch(prevChild, nextChild, container, parentAnchor, parentComponent); e1--; e2--; } if (i &gt; e1 &amp;&amp; i &lt;= e2) { // 如果是这种情况的话就说明 e2 也就是新节点的数量大于旧节点的数量 // 也就是说新增了 vnode // 应该循环 c2 // 锚点的计算：新的节点有可能需要添加到尾部，也可能添加到头部，所以需要指定添加的问题 // 要添加的位置是当前的位置(e2 开始)+1 // 因为对于往左侧添加的话，应该获取到 c2 的第一个元素 // 所以我们需要从 e2 + 1 取到锚点的位置 const nextPos = e2 + 1; const anchor = nextPos &lt; l2 ? c2[nextPos].el : parentAnchor; while (i &lt;= e2) { console.log(`需要新创建一个 vnode: ${c2[i].key}`); patch(null, c2[i], container, anchor, parentComponent); i++; } } else if (i &gt; e2 &amp;&amp; i &lt;= e1) { // 这种情况的话说明新节点的数量是小于旧节点的数量的 // 那么我们就需要把多余的 while (i &lt;= e1) { console.log(`需要删除当前的 vnode: ${c1[i].key}`); hostRemove(c1[i].el); i++; } } else { // 左右两边都比对完了，然后剩下的就是中间部位顺序变动的 // 例如下面的情况 // a,b,[c,d,e],f,g // a,b,[e,c,d],f,g let s1 = i; let s2 = i; const keyToNewIndexMap = new Map(); let moved = false; let maxNewIndexSoFar = 0; // 先把 key 和 newIndex 绑定好，方便后续基于 key 找到 newIndex // 时间复杂度是 O(1) for (let i = s2; i &lt;= e2; i++) { const nextChild = c2[i]; keyToNewIndexMap.set(nextChild.key, i); } // 需要处理新节点的数量 const toBePatched = e2 - s2 + 1; let patched = 0; // 初始化 从新的index映射为老的index // 创建数组的时候给定数组的长度，这个是性能最快的写法 const newIndexToOldIndexMap = new Array(toBePatched); // 初始化为 0 , 后面处理的时候 如果发现是 0 的话，那么就说明新值在老的里面不存在 for (let i = 0; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = 0; // 遍历老节点 // 1. 需要找出老节点有，而新节点没有的 -&gt; 需要把这个节点删除掉 // 2. 新老节点都有的，—&gt; 需要 patch for (i = s1; i &lt;= e1; i++) { const prevChild = c1[i]; // 优化点 // 如果老的节点大于新节点的数量的话，那么这里在处理老节点的时候就直接删除即可 if (patched &gt;= toBePatched) { hostRemove(prevChild.el); continue; } let newIndex; if (prevChild.key != null) { // 这里就可以通过key快速的查找了， 看看在新的里面这个节点存在不存在 // 时间复杂度O(1) newIndex = keyToNewIndexMap.get(prevChild.key); } else { // 如果没key 的话，那么只能是遍历所有的新节点来确定当前节点存在不存在了 // 时间复杂度O(n) for (let j = s2; j &lt;= e2; j++) { if (isSameVNodeType(prevChild, c2[j])) { newIndex = j; break; } } } // 因为有可能 nextIndex 的值为0（0也是正常值） // 所以需要通过值是不是 undefined 或者 null 来判断 if (newIndex === undefined) { // 当前节点的key 不存在于 newChildren 中，需要把当前节点给删除掉 hostRemove(prevChild.el); } else { // 新老节点都存在 console.log(\\"新老节点都存在\\"); // 把新节点的索引和老的节点的索引建立映射关系 // i + 1 是因为 i 有可能是0 (0 的话会被认为新节点在老的节点中不存在) newIndexToOldIndexMap[newIndex - s2] = i + 1; // 来确定中间的节点是不是需要移动 // 新的 newIndex 如果一直是升序的话，那么就说明没有移动 // 所以我们可以记录最后一个节点在新的里面的索引，然后看看是不是升序 // 不是升序的话，我们就可以确定节点移动过了 if (newIndex &gt;= maxNewIndexSoFar) { maxNewIndexSoFar = newIndex; } else { moved = true; } patch(prevChild, c2[newIndex], container, null, parentComponent); patched++; } } // 利用最长递增子序列来优化移动逻辑 // 因为元素是升序的话，那么这些元素就是不需要移动的 // 而我们就可以通过最长递增子序列来获取到升序的列表 // 在移动的时候我们去对比这个列表，如果对比上的话，就说明当前元素不需要移动 // 通过 moved 来进行优化，如果没有移动过的话 那么就不需要执行算法 // getSequence 返回的是 newIndexToOldIndexMap 的索引值 // 所以后面我们可以直接遍历索引值来处理，也就是直接使用 toBePatched 即可 const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : []; let j = increasingNewIndexSequence.length - 1; // 遍历新节点 // 1. 需要找出老节点没有，而新节点有的 -&gt; 需要把这个节点创建 // 2. 最后需要移动一下位置，比如 [c,d,e] -&gt; [e,c,d] // 这里倒循环是因为在 insert 的时候，需要保证锚点是处理完的节点（也就是已经确定位置了） // 因为 insert 逻辑是使用的 insertBefore() for (let i = toBePatched - 1; i &gt;= 0; i--) { // 确定当前要处理的节点索引 const nextIndex = s2 + i; const nextChild = c2[nextIndex]; // 锚点等于当前节点索引+1 // 也就是当前节点的后面一个节点(又因为是倒遍历，所以锚点是位置确定的节点) const anchor = nextIndex + 1 &lt; l2 ? c2[nextIndex + 1].el : parentAnchor; if (newIndexToOldIndexMap[i] === 0) { // 说明新节点在老的里面不存在 // 需要创建 patch(null, nextChild, container, anchor, parentComponent); } else if (moved) { // 需要移动 // 1. j 已经没有了 说明剩下的都需要移动了 // 2. 最长子序列里面的值和当前的值匹配不上， 说明当前元素需要移动 if (j &lt; 0 || increasingNewIndexSequence[j] !== i) { // 移动的话使用 insert 即可 hostInsert(nextChild.el, container, anchor); } else { // 这里就是命中了 index 和 最长递增子序列的值 // 所以可以移动指针了 j--; } } } } } function mountElement(vnode, container, anchor) { const { shapeFlag, props } = vnode; // 1. 先创建 element // 基于可扩展的渲染 api const el = (vnode.el = hostCreateElement(vnode.type)); // 支持单子组件和多子组件的创建 if (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { // 举个栗子 // render(){ // return h(\\"div\\",{},\\"test\\") // } // 这里 children 就是 test ，只需要渲染一下就完事了 console.log(`处理文本:${vnode.children}`); hostSetElementText(el, vnode.children); } else if (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) { // 举个栗子 // render(){ // Hello 是个 component // return h(\\"div\\",{},[h(\\"p\\"),h(Hello)]) // } // 这里 children 就是个数组了，就需要依次调用 patch 递归来处理 mountChildren(vnode.children, el); } // 处理 props if (props) { for (const key in props) { // todo // 需要过滤掉vue自身用的key // 比如生命周期相关的 key: beforeMount、mounted const nextVal = props[key]; hostPatchProp(el, key, null, nextVal); } } // todo // 触发 beforeMount() 钩子 console.log(\\"vnodeHook -&gt; onVnodeBeforeMount\\"); console.log(\\"DirectiveHook -&gt; beforeMount\\"); console.log(\\"transition -&gt; beforeEnter\\"); // 插入 hostInsert(el, container, anchor); // todo // 触发 mounted() 钩子 console.log(\\"vnodeHook -&gt; onVnodeMounted\\"); console.log(\\"DirectiveHook -&gt; mounted\\"); console.log(\\"transition -&gt; enter\\"); } function mountChildren(children, container) { children.forEach((VNodeChild) =&gt; { // todo // 这里应该需要处理一下 vnodeChild // 因为有可能不是 vnode 类型 console.log(\\"mountChildren:\\", VNodeChild); patch(null, VNodeChild, container); }); } function processComponent(n1, n2, container, parentComponent) { // 如果 n1 没有值的话，那么就是 mount if (!n1) { // 初始化 component mountComponent(n2, container, parentComponent); } else { updateComponent(n1, n2, container); } } // 组件的更新 function updateComponent(n1, n2, container) { console.log(\\"更新组件\\", n1, n2); // 更新组件实例引用 const instance = (n2.component = n1.component); // 先看看这个组件是否应该更新 if (shouldUpdateComponent(n1, n2)) { console.log(`组件需要更新: ${instance}`); // 那么 next 就是新的 vnode 了（也就是 n2） instance.next = n2; // 这里的 update 是在 setupRenderEffect 里面初始化的，update 函数除了当内部的响应式对象发生改变的时候会调用 // 还可以直接主动的调用(这是属于 effect 的特性) // 调用 update 再次更新调用 patch 逻辑 // 在update 中调用的 next 就变成了 n2了 // ps：可以详细的看看 update 中 next 的应用 // TODO 需要在 update 中处理支持 next 的逻辑 instance.update(); } else { console.log(`组件不需要更新: ${instance}`); // 不需要更新的话，那么只需要覆盖下面的属性即可 n2.component = n1.component; n2.el = n1.el; instance.vnode = n2; } } function mountComponent(initialVNode, container, parentComponent) { // 1. 先创建一个 component instance const instance = (initialVNode.component = createComponentInstance( initialVNode, parentComponent )); console.log(`创建组件实例:${instance.type.name}`); // 2. 给 instance 加工加工 setupComponent(instance); setupRenderEffect(instance, initialVNode, container); } function setupRenderEffect(instance, initialVNode, container) { // 调用 render // 应该传入 ctx 也就是 proxy // ctx 可以选择暴露给用户的 api // 源代码里面是调用的 renderComponentRoot 函数 // 这里为了简化直接调用 render // obj.name = \\"111\\" // obj.name = \\"2222\\" // 从哪里做一些事 // 收集数据改变之后要做的事 (函数) // 依赖收集 effect 函数 // 触发依赖 function componentUpdateFn() { if (!instance.isMounted) { // 组件初始化的时候会执行这里 // 为什么要在这里调用 render 函数呢 // 是因为在 effect 内调用 render 才能触发依赖收集 // 等到后面响应式的值变更后会再次触发这个函数 console.log(`${instance.type.name}:调用 render,获取 subTree`); const proxyToUse = instance.proxy; // 可在 render 函数中通过 this 来使用 proxy const subTree = (instance.subTree = normalizeVNode( instance.render.call(proxyToUse, proxyToUse) )); console.log(\\"subTree\\", subTree); // todo console.log(`${instance.type.name}:触发 beforeMount hook`); console.log(`${instance.type.name}:触发 onVnodeBeforeMount hook`); // 这里基于 subTree 再次调用 patch // 基于 render 返回的 vnode ，再次进行渲染 // 这里我把这个行为隐喻成开箱 // 一个组件就是一个箱子 // 里面有可能是 element （也就是可以直接渲染的） // 也有可能还是 component // 这里就是递归的开箱 // 而 subTree 就是当前的这个箱子（组件）装的东西 // 箱子（组件）只是个概念，它实际是不需要渲染的 // 要渲染的是箱子里面的 subTree patch(null, subTree, container, null, instance); // 把 root element 赋值给 组件的vnode.el ，为后续调用 $el 的时候获取值 initialVNode.el = subTree.el; console.log(`${instance.type.name}:触发 mounted hook`); instance.isMounted = true; } else { // 响应式的值变更后会从这里执行逻辑 // 主要就是拿到新的 vnode ，然后和之前的 vnode 进行对比 console.log(`${instance.type.name}:调用更新逻辑`); // 拿到最新的 subTree const { next, vnode } = instance; // 如果有 next 的话， 说明需要更新组件的数据（props，slots 等） // 先更新组件的数据，然后更新完成后，在继续对比当前组件的子元素 if (next) { // 问题是 next 和 vnode 的区别是什么 next.el = vnode.el; updateComponentPreRender(instance, next); } const proxyToUse = instance.proxy; const nextTree = normalizeVNode( instance.render.call(proxyToUse, proxyToUse) ); // 替换之前的 subTree const prevTree = instance.subTree; instance.subTree = nextTree; // 触发 beforeUpdated hook console.log(`${instance.type.name}:触发 beforeUpdated hook`); console.log(`${instance.type.name}:触发 onVnodeBeforeUpdate hook`); // 用旧的 vnode 和新的 vnode 交给 patch 来处理 patch(prevTree, nextTree, prevTree.el, null, instance); // 触发 updated hook console.log(`${instance.type.name}:触发 updated hook`); console.log(`${instance.type.name}:触发 onVnodeUpdated hook`); } } // 在 vue3.2 版本里面是使用的 new ReactiveEffect // 至于为什么不直接用 effect ，是因为需要一个 scope 参数来收集所有的 effect // 而 effect 这个函数是对外的 api ，是不可以轻易改变参数的，所以会使用 new ReactiveEffect // 因为 ReactiveEffect 是内部对象，加一个参数是无所谓的 // 后面如果要实现 scope 的逻辑的时候 需要改过来 // 现在就先算了 instance.update = effect(componentUpdateFn, { scheduler: () =&gt; { // 把 effect 推到微任务的时候在执行 // queueJob(effect); queueJob(instance.update); }, }); } function updateComponentPreRender(instance, nextVNode) { // 更新 nextVNode 的组件实例 // 现在 instance.vnode 是组件实例更新前的 // 所以之前的 props 就是基于 instance.vnode.props 来获取 // 接着需要更新 vnode ，方便下一次更新的时候获取到正确的值 nextVNode.component = instance; // TODO 后面更新 props 的时候需要对比 // const prevProps = instance.vnode.props; instance.vnode = nextVNode; instance.next = null; const { props } = nextVNode; console.log(\\"更新组件的 props\\", props); instance.props = props; console.log(\\"更新组件的 slots\\"); // TODO 更新组件的 slots // 需要重置 vnode } return { render, createApp: createAppAPI(render), }; } function getSequence(arr: number[]): number[] { const p = arr.slice(); const result = [0]; let i, j, u, v, c; const len = arr.length; for (i = 0; i &lt; len; i++) { const arrI = arr[i]; if (arrI !== 0) { j = result[result.length - 1]; if (arr[j] &lt; arrI) { p[i] = j; result.push(i); continue; } u = 0; v = result.length - 1; while (u &lt; v) { c = (u + v) &gt;&gt; 1; if (arr[result[c]] &lt; arrI) { u = c + 1; } else { v = c; } } if (arrI &lt; arr[result[u]]) { if (u &gt; 0) { p[i] = result[u - 1]; } result[u] = i; } } } u = result.length; v = result[u - 1]; while (u-- &gt; 0) { result[u] = v; v = p[v]; } return result; }","head":[["meta",{"property":"og:url","content":"https://oragekk.me/Zzh/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/render.html"}],["meta",{"property":"og:site_name","content":"ZiHao Blog"}],["meta",{"property":"og:title","content":"vue3源码本码-render"}],["meta",{"property":"og:description","content":"import { ShapeFlags } from \\"@mini-vue/shared\\"; import { createComponentInstance } from \\"./component\\"; import { queueJob } from \\"./scheduler\\"; import { effect } from \\"@mini-vue/reactivity\\"; import { setupComponent } from \\"./component\\"; import { Fragment, normalizeVNode, Text } from \\"./vnode\\"; import { shouldUpdateComponent } from \\"./componentRenderUtils\\"; import { createAppAPI } from \\"./createApp\\"; export function createRenderer(options) { const { createElement: hostCreateElement, setElementText: hostSetElementText, patchProp: hostPatchProp, insert: hostInsert, remove: hostRemove, setText: hostSetText, createText: hostCreateText, } = options; const render = (vnode, container) =&gt; { console.log(\\"调用 patch\\") patch(null, vnode, container); }; function patch( n1, n2, container = null, anchor = null, parentComponent = null ) { // 基于 n2 的类型来判断 // 因为 n2 是新的 vnode const { type, shapeFlag } = n2; switch (type) { case Text: processText(n1, n2, container); break; // 其中还有几个类型比如： static fragment comment case Fragment: processFragment(n1, n2, container); break; default: // 这里就基于 shapeFlag 来处理 if (shapeFlag &amp; ShapeFlags.ELEMENT) { console.log(\\"处理 element\\"); processElement(n1, n2, container, anchor, parentComponent); } else if (shapeFlag &amp; ShapeFlags.STATEFUL_COMPONENT) { console.log(\\"处理 component\\"); processComponent(n1, n2, container, parentComponent); } } } function processFragment(n1: any, n2: any, container: any) { // 只需要渲染 children ，然后给添加到 container 内 if (!n1) { // 初始化 Fragment 逻辑点 console.log(\\"初始化 Fragment 类型的节点\\"); mountChildren(n2.children, container); } } function processText(n1, n2, container) { console.log(\\"处理 Text 节点\\"); if (n1 === null) { // n1 是 null 说明是 init 的阶段 // 基于 createText 创建出 text 节点，然后使用 insert 添加到 el 内 console.log(\\"初始化 Text 类型的节点\\"); hostInsert((n2.el = hostCreateText(n2.children as string)), container); } else { // update // 先对比一下 updated 之后的内容是否和之前的不一样 // 在不一样的时候才需要 update text // 这里抽离出来的接口是 setText // 注意，这里一定要记得把 n1.el 赋值给 n2.el, 不然后续是找不到值的 const el = (n2.el = n1.el!); if (n2.children !== n1.children) { console.log(\\"更新 Text 类型的节点\\"); hostSetText(el, n2.children as string); } } } function processElement(n1, n2, container, anchor, parentComponent) { if (!n1) { mountElement(n2, container, anchor); } else { // todo updateElement(n1, n2, container, anchor, parentComponent); } } function updateElement(n1, n2, container, anchor, parentComponent) { const oldProps = (n1 &amp;&amp; n1.props) || {}; const newProps = n2.props || {}; // 应该更新 element console.log(\\"应该更新 element\\"); console.log(\\"旧的 vnode\\", n1); console.log(\\"新的 vnode\\", n2); // 需要把 el 挂载到新的 vnode const el = (n2.el = n1.el); // 对比 props patchProps(el, oldProps, newProps); // 对比 children patchChildren(n1, n2, el, anchor, parentComponent); } function patchProps(el, oldProps, newProps) { // 对比 props 有以下几种情况 // 1. oldProps 有，newProps 也有，但是 val 值变更了 // 举个栗子 // 之前: oldProps.id = 1 ，更新后：newProps.id = 2 // key 存在 oldProps 里 也存在 newProps 内 // 以 newProps 作为基准 for (const key in newProps) { const prevProp = oldProps[key]; const nextProp = newProps[key]; if (prevProp !== nextProp) { // 对比属性 // 需要交给 host 来更新 key hostPatchProp(el, key, prevProp, nextProp); } } // 2. oldProps 有，而 newProps 没有了 // 之前： {id:1,tId:2} 更新后： {id:1} // 这种情况下我们就应该以 oldProps 作为基准，因为在 newProps 里面是没有的 tId 的 // \\b还需要注意一点，如果这个 key 在 newProps 里面已经存在了，说明已经处理过了，就不要在处理了 for (const key in oldProps) { const prevProp = oldProps[key]; const nextProp = null; if (!(key in newProps)) { // 这里是以 oldProps 为基准来遍历， // 而且得到的值是 newProps 内没有的 // 所以交给 host 更新的时候，把新的值设置为 null hostPatchProp(el, key, prevProp, nextProp); } } } function patchChildren(n1, n2, container, anchor, parentComponent) { const { shapeFlag: prevShapeFlag, children: c1 } = n1; const { shapeFlag, children: c2 } = n2; // 如果 n2 的 children 是 text 类型的话 // 就看看和之前的 n1 的 children 是不是一样的 // 如果不一样的话直接重新设置一下 text 即可 if (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { if (c2 !== c1) { console.log(\\"类型为 text_children, 当前需要更新\\"); hostSetElementText(container, c2 as string); } } else { // 看看之前的是不是 text if (prevShapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { // 先清空 // 然后在把新的 children 给 mount 生成 element hostSetElementText(container, \\"\\"); mountChildren(c2, container); } else { // array diff array // 如果之前是 array_children // 现在还是 array_children 的话 // 那么我们就需要对比两个 children 啦 patchKeyedChildren(c1, c2, container, parentComponent, anchor); } } } function patchKeyedChildren( c1: any[], c2: any[], container, parentAnchor, parentComponent ) { let i = 0; const l2 = c2.length; let e1 = c1.length - 1; let e2 = l2 - 1; const isSameVNodeType = (n1, n2) =&gt; { return n1.type === n2.type &amp;&amp; n1.key === n2.key; }; while (i &lt;= e1 &amp;&amp; i &lt;= e2) { const prevChild = c1[i]; const nextChild = c2[i]; if (!isSameVNodeType(prevChild, nextChild)) { console.log(\\"两个 child 不相等(从左往右比对)\\"); console.log(`prevChild:${prevChild}`); console.log(`nextChild:${nextChild}`); break; } console.log(\\"两个 child 相等，接下来对比这两个 child 节点(从左往右比对)\\"); patch(prevChild, nextChild, container, parentAnchor, parentComponent); i++; } while (i &lt;= e1 &amp;&amp; i &lt;= e2) { // 从右向左取值 const prevChild = c1[e1]; const nextChild = c2[e2]; if (!isSameVNodeType(prevChild, nextChild)) { console.log(\\"两个 child 不相等(从右往左比对)\\"); console.log(`prevChild:${prevChild}`); console.log(`nextChild:${nextChild}`); break; } console.log(\\"两个 child 相等，接下来对比这两个 child 节点(从右往左比对)\\"); patch(prevChild, nextChild, container, parentAnchor, parentComponent); e1--; e2--; } if (i &gt; e1 &amp;&amp; i &lt;= e2) { // 如果是这种情况的话就说明 e2 也就是新节点的数量大于旧节点的数量 // 也就是说新增了 vnode // 应该循环 c2 // 锚点的计算：新的节点有可能需要添加到尾部，也可能添加到头部，所以需要指定添加的问题 // 要添加的位置是当前的位置(e2 开始)+1 // 因为对于往左侧添加的话，应该获取到 c2 的第一个元素 // 所以我们需要从 e2 + 1 取到锚点的位置 const nextPos = e2 + 1; const anchor = nextPos &lt; l2 ? c2[nextPos].el : parentAnchor; while (i &lt;= e2) { console.log(`需要新创建一个 vnode: ${c2[i].key}`); patch(null, c2[i], container, anchor, parentComponent); i++; } } else if (i &gt; e2 &amp;&amp; i &lt;= e1) { // 这种情况的话说明新节点的数量是小于旧节点的数量的 // 那么我们就需要把多余的 while (i &lt;= e1) { console.log(`需要删除当前的 vnode: ${c1[i].key}`); hostRemove(c1[i].el); i++; } } else { // 左右两边都比对完了，然后剩下的就是中间部位顺序变动的 // 例如下面的情况 // a,b,[c,d,e],f,g // a,b,[e,c,d],f,g let s1 = i; let s2 = i; const keyToNewIndexMap = new Map(); let moved = false; let maxNewIndexSoFar = 0; // 先把 key 和 newIndex 绑定好，方便后续基于 key 找到 newIndex // 时间复杂度是 O(1) for (let i = s2; i &lt;= e2; i++) { const nextChild = c2[i]; keyToNewIndexMap.set(nextChild.key, i); } // 需要处理新节点的数量 const toBePatched = e2 - s2 + 1; let patched = 0; // 初始化 从新的index映射为老的index // 创建数组的时候给定数组的长度，这个是性能最快的写法 const newIndexToOldIndexMap = new Array(toBePatched); // 初始化为 0 , 后面处理的时候 如果发现是 0 的话，那么就说明新值在老的里面不存在 for (let i = 0; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = 0; // 遍历老节点 // 1. 需要找出老节点有，而新节点没有的 -&gt; 需要把这个节点删除掉 // 2. 新老节点都有的，—&gt; 需要 patch for (i = s1; i &lt;= e1; i++) { const prevChild = c1[i]; // 优化点 // 如果老的节点大于新节点的数量的话，那么这里在处理老节点的时候就直接删除即可 if (patched &gt;= toBePatched) { hostRemove(prevChild.el); continue; } let newIndex; if (prevChild.key != null) { // 这里就可以通过key快速的查找了， 看看在新的里面这个节点存在不存在 // 时间复杂度O(1) newIndex = keyToNewIndexMap.get(prevChild.key); } else { // 如果没key 的话，那么只能是遍历所有的新节点来确定当前节点存在不存在了 // 时间复杂度O(n) for (let j = s2; j &lt;= e2; j++) { if (isSameVNodeType(prevChild, c2[j])) { newIndex = j; break; } } } // 因为有可能 nextIndex 的值为0（0也是正常值） // 所以需要通过值是不是 undefined 或者 null 来判断 if (newIndex === undefined) { // 当前节点的key 不存在于 newChildren 中，需要把当前节点给删除掉 hostRemove(prevChild.el); } else { // 新老节点都存在 console.log(\\"新老节点都存在\\"); // 把新节点的索引和老的节点的索引建立映射关系 // i + 1 是因为 i 有可能是0 (0 的话会被认为新节点在老的节点中不存在) newIndexToOldIndexMap[newIndex - s2] = i + 1; // 来确定中间的节点是不是需要移动 // 新的 newIndex 如果一直是升序的话，那么就说明没有移动 // 所以我们可以记录最后一个节点在新的里面的索引，然后看看是不是升序 // 不是升序的话，我们就可以确定节点移动过了 if (newIndex &gt;= maxNewIndexSoFar) { maxNewIndexSoFar = newIndex; } else { moved = true; } patch(prevChild, c2[newIndex], container, null, parentComponent); patched++; } } // 利用最长递增子序列来优化移动逻辑 // 因为元素是升序的话，那么这些元素就是不需要移动的 // 而我们就可以通过最长递增子序列来获取到升序的列表 // 在移动的时候我们去对比这个列表，如果对比上的话，就说明当前元素不需要移动 // 通过 moved 来进行优化，如果没有移动过的话 那么就不需要执行算法 // getSequence 返回的是 newIndexToOldIndexMap 的索引值 // 所以后面我们可以直接遍历索引值来处理，也就是直接使用 toBePatched 即可 const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : []; let j = increasingNewIndexSequence.length - 1; // 遍历新节点 // 1. 需要找出老节点没有，而新节点有的 -&gt; 需要把这个节点创建 // 2. 最后需要移动一下位置，比如 [c,d,e] -&gt; [e,c,d] // 这里倒循环是因为在 insert 的时候，需要保证锚点是处理完的节点（也就是已经确定位置了） // 因为 insert 逻辑是使用的 insertBefore() for (let i = toBePatched - 1; i &gt;= 0; i--) { // 确定当前要处理的节点索引 const nextIndex = s2 + i; const nextChild = c2[nextIndex]; // 锚点等于当前节点索引+1 // 也就是当前节点的后面一个节点(又因为是倒遍历，所以锚点是位置确定的节点) const anchor = nextIndex + 1 &lt; l2 ? c2[nextIndex + 1].el : parentAnchor; if (newIndexToOldIndexMap[i] === 0) { // 说明新节点在老的里面不存在 // 需要创建 patch(null, nextChild, container, anchor, parentComponent); } else if (moved) { // 需要移动 // 1. j 已经没有了 说明剩下的都需要移动了 // 2. 最长子序列里面的值和当前的值匹配不上， 说明当前元素需要移动 if (j &lt; 0 || increasingNewIndexSequence[j] !== i) { // 移动的话使用 insert 即可 hostInsert(nextChild.el, container, anchor); } else { // 这里就是命中了 index 和 最长递增子序列的值 // 所以可以移动指针了 j--; } } } } } function mountElement(vnode, container, anchor) { const { shapeFlag, props } = vnode; // 1. 先创建 element // 基于可扩展的渲染 api const el = (vnode.el = hostCreateElement(vnode.type)); // 支持单子组件和多子组件的创建 if (shapeFlag &amp; ShapeFlags.TEXT_CHILDREN) { // 举个栗子 // render(){ // return h(\\"div\\",{},\\"test\\") // } // 这里 children 就是 test ，只需要渲染一下就完事了 console.log(`处理文本:${vnode.children}`); hostSetElementText(el, vnode.children); } else if (shapeFlag &amp; ShapeFlags.ARRAY_CHILDREN) { // 举个栗子 // render(){ // Hello 是个 component // return h(\\"div\\",{},[h(\\"p\\"),h(Hello)]) // } // 这里 children 就是个数组了，就需要依次调用 patch 递归来处理 mountChildren(vnode.children, el); } // 处理 props if (props) { for (const key in props) { // todo // 需要过滤掉vue自身用的key // 比如生命周期相关的 key: beforeMount、mounted const nextVal = props[key]; hostPatchProp(el, key, null, nextVal); } } // todo // 触发 beforeMount() 钩子 console.log(\\"vnodeHook -&gt; onVnodeBeforeMount\\"); console.log(\\"DirectiveHook -&gt; beforeMount\\"); console.log(\\"transition -&gt; beforeEnter\\"); // 插入 hostInsert(el, container, anchor); // todo // 触发 mounted() 钩子 console.log(\\"vnodeHook -&gt; onVnodeMounted\\"); console.log(\\"DirectiveHook -&gt; mounted\\"); console.log(\\"transition -&gt; enter\\"); } function mountChildren(children, container) { children.forEach((VNodeChild) =&gt; { // todo // 这里应该需要处理一下 vnodeChild // 因为有可能不是 vnode 类型 console.log(\\"mountChildren:\\", VNodeChild); patch(null, VNodeChild, container); }); } function processComponent(n1, n2, container, parentComponent) { // 如果 n1 没有值的话，那么就是 mount if (!n1) { // 初始化 component mountComponent(n2, container, parentComponent); } else { updateComponent(n1, n2, container); } } // 组件的更新 function updateComponent(n1, n2, container) { console.log(\\"更新组件\\", n1, n2); // 更新组件实例引用 const instance = (n2.component = n1.component); // 先看看这个组件是否应该更新 if (shouldUpdateComponent(n1, n2)) { console.log(`组件需要更新: ${instance}`); // 那么 next 就是新的 vnode 了（也就是 n2） instance.next = n2; // 这里的 update 是在 setupRenderEffect 里面初始化的，update 函数除了当内部的响应式对象发生改变的时候会调用 // 还可以直接主动的调用(这是属于 effect 的特性) // 调用 update 再次更新调用 patch 逻辑 // 在update 中调用的 next 就变成了 n2了 // ps：可以详细的看看 update 中 next 的应用 // TODO 需要在 update 中处理支持 next 的逻辑 instance.update(); } else { console.log(`组件不需要更新: ${instance}`); // 不需要更新的话，那么只需要覆盖下面的属性即可 n2.component = n1.component; n2.el = n1.el; instance.vnode = n2; } } function mountComponent(initialVNode, container, parentComponent) { // 1. 先创建一个 component instance const instance = (initialVNode.component = createComponentInstance( initialVNode, parentComponent )); console.log(`创建组件实例:${instance.type.name}`); // 2. 给 instance 加工加工 setupComponent(instance); setupRenderEffect(instance, initialVNode, container); } function setupRenderEffect(instance, initialVNode, container) { // 调用 render // 应该传入 ctx 也就是 proxy // ctx 可以选择暴露给用户的 api // 源代码里面是调用的 renderComponentRoot 函数 // 这里为了简化直接调用 render // obj.name = \\"111\\" // obj.name = \\"2222\\" // 从哪里做一些事 // 收集数据改变之后要做的事 (函数) // 依赖收集 effect 函数 // 触发依赖 function componentUpdateFn() { if (!instance.isMounted) { // 组件初始化的时候会执行这里 // 为什么要在这里调用 render 函数呢 // 是因为在 effect 内调用 render 才能触发依赖收集 // 等到后面响应式的值变更后会再次触发这个函数 console.log(`${instance.type.name}:调用 render,获取 subTree`); const proxyToUse = instance.proxy; // 可在 render 函数中通过 this 来使用 proxy const subTree = (instance.subTree = normalizeVNode( instance.render.call(proxyToUse, proxyToUse) )); console.log(\\"subTree\\", subTree); // todo console.log(`${instance.type.name}:触发 beforeMount hook`); console.log(`${instance.type.name}:触发 onVnodeBeforeMount hook`); // 这里基于 subTree 再次调用 patch // 基于 render 返回的 vnode ，再次进行渲染 // 这里我把这个行为隐喻成开箱 // 一个组件就是一个箱子 // 里面有可能是 element （也就是可以直接渲染的） // 也有可能还是 component // 这里就是递归的开箱 // 而 subTree 就是当前的这个箱子（组件）装的东西 // 箱子（组件）只是个概念，它实际是不需要渲染的 // 要渲染的是箱子里面的 subTree patch(null, subTree, container, null, instance); // 把 root element 赋值给 组件的vnode.el ，为后续调用 $el 的时候获取值 initialVNode.el = subTree.el; console.log(`${instance.type.name}:触发 mounted hook`); instance.isMounted = true; } else { // 响应式的值变更后会从这里执行逻辑 // 主要就是拿到新的 vnode ，然后和之前的 vnode 进行对比 console.log(`${instance.type.name}:调用更新逻辑`); // 拿到最新的 subTree const { next, vnode } = instance; // 如果有 next 的话， 说明需要更新组件的数据（props，slots 等） // 先更新组件的数据，然后更新完成后，在继续对比当前组件的子元素 if (next) { // 问题是 next 和 vnode 的区别是什么 next.el = vnode.el; updateComponentPreRender(instance, next); } const proxyToUse = instance.proxy; const nextTree = normalizeVNode( instance.render.call(proxyToUse, proxyToUse) ); // 替换之前的 subTree const prevTree = instance.subTree; instance.subTree = nextTree; // 触发 beforeUpdated hook console.log(`${instance.type.name}:触发 beforeUpdated hook`); console.log(`${instance.type.name}:触发 onVnodeBeforeUpdate hook`); // 用旧的 vnode 和新的 vnode 交给 patch 来处理 patch(prevTree, nextTree, prevTree.el, null, instance); // 触发 updated hook console.log(`${instance.type.name}:触发 updated hook`); console.log(`${instance.type.name}:触发 onVnodeUpdated hook`); } } // 在 vue3.2 版本里面是使用的 new ReactiveEffect // 至于为什么不直接用 effect ，是因为需要一个 scope 参数来收集所有的 effect // 而 effect 这个函数是对外的 api ，是不可以轻易改变参数的，所以会使用 new ReactiveEffect // 因为 ReactiveEffect 是内部对象，加一个参数是无所谓的 // 后面如果要实现 scope 的逻辑的时候 需要改过来 // 现在就先算了 instance.update = effect(componentUpdateFn, { scheduler: () =&gt; { // 把 effect 推到微任务的时候在执行 // queueJob(effect); queueJob(instance.update); }, }); } function updateComponentPreRender(instance, nextVNode) { // 更新 nextVNode 的组件实例 // 现在 instance.vnode 是组件实例更新前的 // 所以之前的 props 就是基于 instance.vnode.props 来获取 // 接着需要更新 vnode ，方便下一次更新的时候获取到正确的值 nextVNode.component = instance; // TODO 后面更新 props 的时候需要对比 // const prevProps = instance.vnode.props; instance.vnode = nextVNode; instance.next = null; const { props } = nextVNode; console.log(\\"更新组件的 props\\", props); instance.props = props; console.log(\\"更新组件的 slots\\"); // TODO 更新组件的 slots // 需要重置 vnode } return { render, createApp: createAppAPI(render), }; } function getSequence(arr: number[]): number[] { const p = arr.slice(); const result = [0]; let i, j, u, v, c; const len = arr.length; for (i = 0; i &lt; len; i++) { const arrI = arr[i]; if (arrI !== 0) { j = result[result.length - 1]; if (arr[j] &lt; arrI) { p[i] = j; result.push(i); continue; } u = 0; v = result.length - 1; while (u &lt; v) { c = (u + v) &gt;&gt; 1; if (arr[result[c]] &lt; arrI) { u = c + 1; } else { v = c; } } if (arrI &lt; arr[result[u]]) { if (u &gt; 0) { p[i] = result[u - 1]; } result[u] = i; } } } u = result.length; v = result[u - 1]; while (u-- &gt; 0) { result[u] = v; v = p[v]; } return result; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-23T03:49:02.000Z"}],["meta",{"property":"article:author","content":"ZiHao"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2023-03-04T20:30:14.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-23T03:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3源码本码-render\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-04T20:30:14.000Z\\",\\"dateModified\\":\\"2023-07-23T03:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZiHao\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[],"git":{"createdTime":1690084142000,"updatedTime":1690084142000,"contributors":[{"name":"Zzhgitup","email":"99540215+Zzhgitup@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.43,"words":4028},"filePathRelative":"blog/学习笔记/render.md","localizedDate":"2023年3月5日","excerpt":"<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"@mini-vue/shared\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">createComponentInstance</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./component\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">queueJob</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./scheduler\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">effect</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"@mini-vue/reactivity\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">setupComponent</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./component\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">Fragment</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">normalizeVNode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">Text</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./vnode\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">shouldUpdateComponent</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./componentRenderUtils\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">import</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">createAppAPI</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #C678DD\\">from</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #98C379\\">\\"./createApp\\"</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">export</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">createRenderer</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">options</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">createElement</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostCreateElement</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">setElementText</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostSetElementText</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">patchProp</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostPatchProp</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">insert</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostInsert</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">remove</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostRemove</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">setText</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostSetText</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">createText</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">hostCreateText</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">options</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">render</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75; font-style: italic\\">vnode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #C678DD\\">=&gt;</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"调用 patch\\"</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">vnode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  };</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">anchor</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  ) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 基于 n2 的类型来判断</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为 n2 是新的 vnode</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">switch</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">type</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">case</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">Text</span><span style=\\"color: #ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">processText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">break</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 其中还有几个类型比如： static fragment comment</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">case</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">Fragment</span><span style=\\"color: #ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">processFragment</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">break</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">default</span><span style=\\"color: #ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里就基于 shapeFlag 来处理</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">ELEMENT</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"处理 element\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">processElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">STATEFUL_COMPONENT</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"处理 component\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">processComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">processFragment</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">any</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">any</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">any</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 只需要渲染 children ，然后给添加到 container 内</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 初始化 Fragment 逻辑点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"初始化 Fragment 类型的节点\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">mountChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">processText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"处理 Text 节点\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">===</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// n1 是 null 说明是 init 的阶段</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 基于 createText 创建出 text 节点，然后使用 insert 添加到 el 内</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"初始化 Text 类型的节点\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">hostInsert</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">hostCreateText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">as</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">string</span><span style=\\"color: #ABB2BF\\">)), </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// update</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 先对比一下 updated 之后的内容是否和之前的不一样</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 在不一样的时候才需要 update text</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里抽离出来的接口是 setText</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 注意，这里一定要记得把 n1.el 赋值给 n2.el, 不然后续是找不到值的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"更新 Text 类型的节点\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostSetText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">as</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">string</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">processElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">mountElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">updateElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">updateElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">oldProps</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">||</span><span style=\\"color: #ABB2BF\\"> {};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">newProps</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">||</span><span style=\\"color: #ABB2BF\\"> {};</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 应该更新 element</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"应该更新 element\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"旧的 vnode\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"新的 vnode\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要把 el 挂载到新的 vnode</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 对比 props</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">patchProps</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">oldProps</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">newProps</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 对比 children</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">patchChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">patchProps</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">oldProps</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">newProps</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 对比 props 有以下几种情况</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. oldProps 有，newProps 也有，但是 val 值变更了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 举个栗子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 之前: oldProps.id = 1 ，更新后：newProps.id = 2</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// key 存在 oldProps 里 也存在 newProps 内</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 以 newProps 作为基准</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">in</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">newProps</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevProp</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">oldProps</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextProp</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">newProps</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">prevProp</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextProp</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 对比属性</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要交给 host 来更新 key</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostPatchProp</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">prevProp</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextProp</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 2. oldProps 有，而 newProps 没有了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 之前： {id:1,tId:2}  更新后： {id:1}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 这种情况下我们就应该以 oldProps 作为基准，因为在 newProps 里面是没有的 tId 的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// \\b还需要注意一点，如果这个 key 在 newProps 里面已经存在了，说明已经处理过了，就不要在处理了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">in</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">oldProps</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevProp</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">oldProps</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextProp</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">in</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">newProps</span><span style=\\"color: #ABB2BF\\">)) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里是以 oldProps 为基准来遍历，</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 而且得到的值是 newProps 内没有的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以交给 host 更新的时候，把新的值设置为 null</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostPatchProp</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">prevProp</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextProp</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">patchChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">prevShapeFlag</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">c1</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E5C07B\\">shapeFlag</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">c2</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果 n2 的 children 是 text 类型的话</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 就看看和之前的 n1 的 children 是不是一样的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果不一样的话直接重新设置一下 text 即可</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">TEXT_CHILDREN</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"类型为 text_children, 当前需要更新\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostSetElementText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">as</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">string</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 看看之前的是不是 text</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">prevShapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">TEXT_CHILDREN</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 先清空</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 然后在把新的 children 给 mount 生成 element</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostSetElementText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #98C379\\">\\"\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">mountChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// array diff array</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果之前是 array_children</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 现在还是 array_children 的话</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 那么我们就需要对比两个 children 啦</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">patchKeyedChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">patchKeyedChildren</span><span style=\\"color: #ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">c1</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">any</span><span style=\\"color: #ABB2BF\\">[],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">c2</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">any</span><span style=\\"color: #ABB2BF\\">[],</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">parentAnchor</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  ) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">l2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">c2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">c1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">l2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">isSameVNodeType</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #C678DD\\">=&gt;</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">type</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">===</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">type</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">===</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    };</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #61AFEF\\">isSameVNodeType</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #ABB2BF\\">)) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"两个 child 不相等(从左往右比对)\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`prevChild:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`nextChild:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">break</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"两个 child 相等，接下来对比这两个 child 节点(从左往右比对)\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentAnchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 从右向左取值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #61AFEF\\">isSameVNodeType</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #ABB2BF\\">)) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"两个 child 不相等(从右往左比对)\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`prevChild:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`nextChild:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">break</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"两个 child 相等，接下来对比这两个 child 节点(从右往左比对)\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentAnchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果是这种情况的话就说明 e2 也就是新节点的数量大于旧节点的数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 也就是说新增了 vnode</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 应该循环 c2</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 锚点的计算：新的节点有可能需要添加到尾部，也可能添加到头部，所以需要指定添加的问题</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 要添加的位置是当前的位置(e2 开始)+1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为对于往左侧添加的话，应该获取到 c2 的第一个元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以我们需要从 e2 + 1 取到锚点的位置</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextPos</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">anchor</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextPos</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">l2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">?</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">nextPos</span><span style=\\"color: #ABB2BF\\">].</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">:</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">parentAnchor</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`需要新创建一个 vnode: </span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">].</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">], </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这种情况的话说明新节点的数量是小于旧节点的数量的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 那么我们就需要把多余的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`需要删除当前的 vnode: </span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">].</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostRemove</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">].</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 左右两边都比对完了，然后剩下的就是中间部位顺序变动的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 例如下面的情况</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// a,b,[c,d,e],f,g</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// a,b,[e,c,d],f,g</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">keyToNewIndexMap</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Map</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">moved</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">false</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">maxNewIndexSoFar</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 先把 key 和 newIndex 绑定好，方便后续基于 key 找到 newIndex</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 时间复杂度是 O(1)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">keyToNewIndexMap</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">set</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要处理新节点的数量</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">toBePatched</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">patched</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 初始化 从新的index映射为老的index</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 创建数组的时候给定数组的长度，这个是性能最快的写法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">newIndexToOldIndexMap</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">new</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">Array</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">toBePatched</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 初始化为 0 , 后面处理的时候 如果发现是 0 的话，那么就说明新值在老的里面不存在</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">toBePatched</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #E06C75\\">newIndexToOldIndexMap</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 遍历老节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. 需要找出老节点有，而新节点没有的 -&gt; 需要把这个节点删除掉</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 2. 新老节点都有的，—&gt; 需要 patch</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s1</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e1</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c1</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 优化点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果老的节点大于新节点的数量的话，那么这里在处理老节点的时候就直接删除即可</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">patched</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">toBePatched</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">hostRemove</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #C678DD\\">continue</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里就可以通过key快速的查找了， 看看在新的里面这个节点存在不存在</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 时间复杂度O(1)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">keyToNewIndexMap</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">get</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果没key 的话，那么只能是遍历所有的新节点来确定当前节点存在不存在了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 时间复杂度O(n)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">e2</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">isSameVNodeType</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">])) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">              </span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">              </span><span style=\\"color: #C678DD\\">break</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为有可能 nextIndex 的值为0（0也是正常值）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以需要通过值是不是 undefined 或者 null 来判断</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">===</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">undefined</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 当前节点的key 不存在于 newChildren 中，需要把当前节点给删除掉</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">hostRemove</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">prevChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 新老节点都存在</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"新老节点都存在\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 把新节点的索引和老的节点的索引建立映射关系</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// i + 1 是因为 i 有可能是0 (0 的话会被认为新节点在老的节点中不存在)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">newIndexToOldIndexMap</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 来确定中间的节点是不是需要移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 新的 newIndex 如果一直是升序的话，那么就说明没有移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以我们可以记录最后一个节点在新的里面的索引，然后看看是不是升序</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 不是升序的话，我们就可以确定节点移动过了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">maxNewIndexSoFar</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E06C75\\">maxNewIndexSoFar</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E06C75\\">moved</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">true</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">newIndex</span><span style=\\"color: #ABB2BF\\">], </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">patched</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 利用最长递增子序列来优化移动逻辑</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为元素是升序的话，那么这些元素就是不需要移动的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 而我们就可以通过最长递增子序列来获取到升序的列表</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 在移动的时候我们去对比这个列表，如果对比上的话，就说明当前元素不需要移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 通过 moved 来进行优化，如果没有移动过的话 那么就不需要执行算法</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// getSequence 返回的是 newIndexToOldIndexMap 的索引值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以后面我们可以直接遍历索引值来处理，也就是直接使用 toBePatched 即可</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">increasingNewIndexSequence</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">moved</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">?</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">getSequence</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">newIndexToOldIndexMap</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">:</span><span style=\\"color: #ABB2BF\\"> [];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">increasingNewIndexSequence</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 遍历新节点</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. 需要找出老节点没有，而新节点有的 -&gt; 需要把这个节点创建</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 2. 最后需要移动一下位置，比如 [c,d,e] -&gt; [e,c,d]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里倒循环是因为在 insert 的时候，需要保证锚点是处理完的节点（也就是已经确定位置了）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为 insert 逻辑是使用的 insertBefore()</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">toBePatched</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 确定当前要处理的节点索引</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">s2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">nextIndex</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 锚点等于当前节点索引+1</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 也就是当前节点的后面一个节点(又因为是倒遍历，所以锚点是位置确定的节点)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">anchor</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">l2</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">?</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c2</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">nextIndex</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">].</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">:</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">parentAnchor</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">newIndexToOldIndexMap</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">===</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 说明新节点在老的里面不存在</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要创建</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">moved</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. j 已经没有了 说明剩下的都需要移动了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 2. 最长子序列里面的值和当前的值匹配不上， 说明当前元素需要移动</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">||</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">increasingNewIndexSequence</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">!==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 移动的话使用 insert 即可</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #61AFEF\\">hostInsert</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">nextChild</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里就是命中了  index 和 最长递增子序列的值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以可以移动指针了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">            </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">mountElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">vnode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">anchor</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E5C07B\\">shapeFlag</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">props</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">vnode</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. 先创建 element</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 基于可扩展的渲染 api</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">hostCreateElement</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">type</span><span style=\\"color: #ABB2BF\\">));</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 支持单子组件和多子组件的创建</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">TEXT_CHILDREN</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 举个栗子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// render(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">//     return h(\\"div\\",{},\\"test\\")</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里 children 就是 test ，只需要渲染一下就完事了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`处理文本:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">hostSetElementText</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">shapeFlag</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&amp;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">ShapeFlags</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">ARRAY_CHILDREN</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 举个栗子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// render(){</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// Hello 是个 component</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">//     return h(\\"div\\",{},[h(\\"p\\"),h(Hello)])</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里 children 就是个数组了，就需要依次调用 patch 递归来处理</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">mountChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">children</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 处理 props</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">key</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #C678DD\\">in</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要过滤掉vue自身用的key</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 比如生命周期相关的 key: beforeMount、mounted</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextVal</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">hostPatchProp</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">key</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextVal</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 触发 beforeMount() 钩子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"vnodeHook  -&gt; onVnodeBeforeMount\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"DirectiveHook  -&gt; beforeMount\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"transition  -&gt; beforeEnter\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 插入</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">hostInsert</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">anchor</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 触发 mounted() 钩子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"vnodeHook  -&gt; onVnodeMounted\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"DirectiveHook  -&gt; mounted\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"transition  -&gt; enter\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">mountChildren</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">children</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">children</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">forEach</span><span style=\\"color: #ABB2BF\\">((</span><span style=\\"color: #E06C75; font-style: italic\\">VNodeChild</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #C678DD\\">=&gt;</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里应该需要处理一下 vnodeChild</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为有可能不是 vnode 类型</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"mountChildren:\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">VNodeChild</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">VNodeChild</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">processComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果 n1 没有值的话，那么就是 mount</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 初始化 component</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">mountComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">parentComponent</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">updateComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #7F848E; font-style: italic\\">// 组件的更新</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">updateComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">n2</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"更新组件\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 更新组件实例引用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 先看看这个组件是否应该更新</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #61AFEF\\">shouldUpdateComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">n1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">)) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`组件需要更新: </span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 那么 next 就是新的 vnode 了（也就是 n2）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里的 update 是在 setupRenderEffect 里面初始化的，update 函数除了当内部的响应式对象发生改变的时候会调用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 还可以直接主动的调用(这是属于 effect 的特性)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 调用 update 再次更新调用 patch 逻辑</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 在update 中调用的 next 就变成了 n2了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// ps：可以详细的看看 update 中 next 的应用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// TODO 需要在 update 中处理支持 next 的逻辑</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">update</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`组件不需要更新: </span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #7F848E; font-style: italic\\">// 不需要更新的话，那么只需要覆盖下面的属性即可</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">n2</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">n1</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">vnode</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">n2</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">mountComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">initialVNode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">parentComponent</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 1. 先创建一个 component instance</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">initialVNode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">createComponentInstance</span><span style=\\"color: #ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">initialVNode</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">parentComponent</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    ));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`创建组件实例:</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 2. 给 instance 加工加工</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">setupComponent</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #61AFEF\\">setupRenderEffect</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">initialVNode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">setupRenderEffect</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">instance</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">initialVNode</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">container</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 调用 render</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 应该传入 ctx 也就是 proxy</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// ctx 可以选择暴露给用户的 api</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 源代码里面是调用的 renderComponentRoot 函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里为了简化直接调用 render</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// obj.name  = \\"111\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// obj.name = \\"2222\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 从哪里做一些事</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 收集数据改变之后要做的事 (函数)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 依赖收集   effect 函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 触发依赖</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">componentUpdateFn</span><span style=\\"color: #ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #56B6C2\\">!</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">isMounted</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 组件初始化的时候会执行这里</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 为什么要在这里调用 render 函数呢</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 是因为在 effect 内调用 render 才能触发依赖收集</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 等到后面响应式的值变更后会再次触发这个函数</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:调用 render,获取 subTree`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">proxyToUse</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">proxy</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 可在 render 函数中通过 this 来使用 proxy</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">subTree</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">subTree</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">normalizeVNode</span><span style=\\"color: #ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">render</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">call</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">proxyToUse</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">proxyToUse</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        ));</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"subTree\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">subTree</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// todo</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 beforeMount hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 onVnodeBeforeMount hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里基于 subTree 再次调用 patch</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 基于 render 返回的 vnode ，再次进行渲染</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里我把这个行为隐喻成开箱</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 一个组件就是一个箱子</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 里面有可能是 element （也就是可以直接渲染的）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 也有可能还是 component</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 这里就是递归的开箱</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 而 subTree 就是当前的这个箱子（组件）装的东西</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 箱子（组件）只是个概念，它实际是不需要渲染的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 要渲染的是箱子里面的 subTree</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">subTree</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">container</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 把 root element 赋值给 组件的vnode.el ，为后续调用 $el 的时候获取值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">initialVNode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">subTree</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 mounted hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">isMounted</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">true</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 响应式的值变更后会从这里执行逻辑</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 主要就是拿到新的 vnode ，然后和之前的 vnode 进行对比</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:调用更新逻辑`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 拿到最新的 subTree</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E5C07B\\">next</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 如果有 next 的话， 说明需要更新组件的数据（props，slots 等）</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 先更新组件的数据，然后更新完成后，在继续对比当前组件的子元素</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #7F848E; font-style: italic\\">// 问题是 next 和 vnode 的区别是什么</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">next</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">vnode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #61AFEF\\">updateComponentPreRender</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">proxyToUse</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">proxy</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">nextTree</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">normalizeVNode</span><span style=\\"color: #ABB2BF\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">render</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">call</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">proxyToUse</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">proxyToUse</span><span style=\\"color: #ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        );</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 替换之前的 subTree</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">prevTree</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">subTree</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">subTree</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextTree</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 触发 beforeUpdated hook</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 beforeUpdated hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 onVnodeBeforeUpdate hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 用旧的 vnode 和新的 vnode 交给 patch 来处理</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">patch</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">prevTree</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">nextTree</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E5C07B\\">prevTree</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">el</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 触发 updated hook</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 updated hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">`</span><span style=\\"color: #C678DD\\">${</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E5C07B\\">type</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">name</span><span style=\\"color: #C678DD\\">}</span><span style=\\"color: #98C379\\">:触发 onVnodeUpdated hook`</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 在 vue3.2 版本里面是使用的 new ReactiveEffect</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 至于为什么不直接用 effect ，是因为需要一个 scope  参数来收集所有的 effect</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 而 effect 这个函数是对外的 api ，是不可以轻易改变参数的，所以会使用  new ReactiveEffect</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 因为 ReactiveEffect 是内部对象，加一个参数是无所谓的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 后面如果要实现 scope 的逻辑的时候 需要改过来</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 现在就先算了</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">update</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">effect</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">componentUpdateFn</span><span style=\\"color: #ABB2BF\\">, {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #61AFEF\\">scheduler</span><span style=\\"color: #ABB2BF\\">: () </span><span style=\\"color: #C678DD\\">=&gt;</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// 把 effect 推到微任务的时候在执行</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #7F848E; font-style: italic\\">// queueJob(effect);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #61AFEF\\">queueJob</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">update</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      },</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    });</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">updateComponentPreRender</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">instance</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75; font-style: italic\\">nextVNode</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 更新 nextVNode 的组件实例</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 现在 instance.vnode 是组件实例更新前的</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 所以之前的 props 就是基于 instance.vnode.props 来获取</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 接着需要更新 vnode ，方便下一次更新的时候获取到正确的值</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">nextVNode</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">component</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">instance</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// TODO 后面更新 props 的时候需要对比</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// const prevProps = instance.vnode.props;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">vnode</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextVNode</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">next</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">null</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> { </span><span style=\\"color: #E5C07B\\">props</span><span style=\\"color: #ABB2BF\\"> } </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">nextVNode</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"更新组件的 props\\"</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">instance</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">props</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E5C07B\\">console</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">log</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #98C379\\">\\"更新组件的 slots\\"</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// TODO 更新组件的 slots</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #7F848E; font-style: italic\\">// 需要重置 vnode</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">render</span><span style=\\"color: #ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">createApp</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #61AFEF\\">createAppAPI</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">render</span><span style=\\"color: #ABB2BF\\">),</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  };</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C678DD\\">function</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #61AFEF\\">getSequence</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75; font-style: italic\\">arr</span><span style=\\"color: #ABB2BF\\">: </span><span style=\\"color: #E5C07B\\">number</span><span style=\\"color: #ABB2BF\\">[]): </span><span style=\\"color: #E5C07B\\">number</span><span style=\\"color: #ABB2BF\\">[] {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">p</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">arr</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">slice</span><span style=\\"color: #ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">result</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> [</span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">let</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">c</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">len</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">arr</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">for</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">len</span><span style=\\"color: #ABB2BF\\">; </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #56B6C2\\">++</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">arrI</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">arr</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">arrI</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">!==</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E5C07B\\">result</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">arr</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">arrI</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E06C75\\">p</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">j</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E5C07B\\">result</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">push</span><span style=\\"color: #ABB2BF\\">(</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">continue</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">result</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E06C75\\">c</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\">) </span><span style=\\"color: #56B6C2\\">&gt;&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">arr</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">c</span><span style=\\"color: #ABB2BF\\">]] </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">arrI</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">+</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        } </span><span style=\\"color: #C678DD\\">else</span><span style=\\"color: #ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">c</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">arrI</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&lt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">arr</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\">]]) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #C678DD\\">if</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">          </span><span style=\\"color: #E06C75\\">p</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">        </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">i</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">result</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #E06C75\\">length</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">-</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">1</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">while</span><span style=\\"color: #ABB2BF\\"> (</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #56B6C2\\">--</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">&gt;</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #D19A66\\">0</span><span style=\\"color: #ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">u</span><span style=\\"color: #ABB2BF\\">] </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">    </span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">p</span><span style=\\"color: #ABB2BF\\">[</span><span style=\\"color: #E06C75\\">v</span><span style=\\"color: #ABB2BF\\">];</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">  </span><span style=\\"color: #C678DD\\">return</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E06C75\\">result</span><span style=\\"color: #ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"ZiHao","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{s as data};
