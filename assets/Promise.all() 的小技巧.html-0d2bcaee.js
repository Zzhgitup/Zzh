const e=JSON.parse('{"key":"v-cc3a8034","path":"/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Promise.all()%20%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7.html","title":"Promise.all() 的小技巧","lang":"zh-CN","frontmatter":{"title":"Promise.all() 的小技巧","date":"2022-11-06T15:34:00.000Z","icon":"blog","tag":["javascript"],"category":["记录"],"description":"Promise 在处理异步操作时很有用。 JavaScript 提供了一个辅助函数 Promise.all(promisesArrayOrIterable)来同时并行处理多个 promise，并在单个聚合数组中获取结果。让我们看看它是如何工作的。 Promise.all() Promise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise： const allPromise = Promise.all([promise1, promise2, ...]);","head":[["meta",{"property":"og:url","content":"https://oragekk.me/Zzh/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Promise.all()%20%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"ZiHao Blog"}],["meta",{"property":"og:title","content":"Promise.all() 的小技巧"}],["meta",{"property":"og:description","content":"Promise 在处理异步操作时很有用。 JavaScript 提供了一个辅助函数 Promise.all(promisesArrayOrIterable)来同时并行处理多个 promise，并在单个聚合数组中获取结果。让我们看看它是如何工作的。 Promise.all() Promise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise： const allPromise = Promise.all([promise1, promise2, ...]);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-23T03:49:02.000Z"}],["meta",{"property":"article:author","content":"ZiHao"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2022-11-06T15:34:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-23T03:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise.all() 的小技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-06T15:34:00.000Z\\",\\"dateModified\\":\\"2023-07-23T03:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZiHao\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"Promise.all()","slug":"promise-all","link":"#promise-all","children":[]},{"level":2,"title":"所有的 Promise fulfilled","slug":"所有的-promise-fulfilled","link":"#所有的-promise-fulfilled","children":[{"level":3,"title":"一个 Promise rejects","slug":"一个-promise-rejects","link":"#一个-promise-rejects","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]}],"git":{"createdTime":1690084142000,"updatedTime":1690084142000,"contributors":[{"name":"Zzhgitup","email":"99540215+Zzhgitup@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.68,"words":504},"filePathRelative":"blog/学习笔记/Promise.all() 的小技巧.md","localizedDate":"2022年11月6日","excerpt":"<p>Promise 在处理异步操作时很有用。<br>\\nJavaScript 提供了一个辅助函数 Promise.all(promisesArrayOrIterable)来同时并行处理多个 promise，并在单个聚合数组中获取结果。让我们看看它是如何工作的。</p>\\n<h2> Promise.all()</h2>\\n<p>Promise.all() 接受一组 promises（或通常是一个可迭代的）。该函数返回一个 promise：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"shiki one-dark-pro\\" style=\\"background-color: #282c34\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color: #C678DD\\">const</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">allPromise</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #56B6C2\\">=</span><span style=\\"color: #ABB2BF\\"> </span><span style=\\"color: #E5C07B\\">Promise</span><span style=\\"color: #ABB2BF\\">.</span><span style=\\"color: #61AFEF\\">all</span><span style=\\"color: #ABB2BF\\">([</span><span style=\\"color: #E06C75\\">promise1</span><span style=\\"color: #ABB2BF\\">, </span><span style=\\"color: #E06C75\\">promise2</span><span style=\\"color: #ABB2BF\\">, ...]);</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"ZiHao","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{e as data};
