const e=JSON.parse('{"key":"v-ea0a3dbc","path":"/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%88%E7%BB%93%E6%9E%84_%E7%AE%97%E6%B3%95.html","title":"栈结构+一道算法","lang":"zh-CN","frontmatter":{"title":"栈结构+一道算法","date":"2022-03-03T00:00:00.000Z","icon":"blog","tag":["javascript"],"category":["记录"],"description":"1.栈（stack） QQ截图20220916150957.png 它是一种受限制的线性表，后见先出 其限制是仅允许在表的一端进行插入和删除操作，这一段被称为栈顶相对地把另一端称为栈底 LIFO 表示就是后进入的元素，带一个弹出栈空间，类似于自动餐托盘最后放上托盘，往往先拿出去使用 向一个栈插入新元素又称作进栈，入栈，或者压栈，他是把新元素放到栈顶元素的上面，使之成为新的栈顶元素 从一个栈删除元素又称作出栈，或者退栈，他是把栈顶元素删掉，使其相邻的元素成为新的栈顶元素。","head":[["meta",{"property":"og:url","content":"https://oragekk.me/Zzh/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%88%E7%BB%93%E6%9E%84_%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"ZiHao Blog"}],["meta",{"property":"og:title","content":"栈结构+一道算法"}],["meta",{"property":"og:description","content":"1.栈（stack） QQ截图20220916150957.png 它是一种受限制的线性表，后见先出 其限制是仅允许在表的一端进行插入和删除操作，这一段被称为栈顶相对地把另一端称为栈底 LIFO 表示就是后进入的元素，带一个弹出栈空间，类似于自动餐托盘最后放上托盘，往往先拿出去使用 向一个栈插入新元素又称作进栈，入栈，或者压栈，他是把新元素放到栈顶元素的上面，使之成为新的栈顶元素 从一个栈删除元素又称作出栈，或者退栈，他是把栈顶元素删掉，使其相邻的元素成为新的栈顶元素。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-23T03:49:02.000Z"}],["meta",{"property":"article:author","content":"ZiHao"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2022-03-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-23T03:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈结构+一道算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-23T03:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZiHao\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"1.栈（stack）","slug":"_1-栈-stack","link":"#_1-栈-stack","children":[]},{"level":2,"title":"2.栈结构的实现 例一","slug":"_2-栈结构的实现-例一","link":"#_2-栈结构的实现-例一","children":[{"level":3,"title":"例二","slug":"例二","link":"#例二","children":[]},{"level":3,"title":"JS 中的函数调用堆栈","slug":"js-中的函数调用堆栈","link":"#js-中的函数调用堆栈","children":[]}]}],"git":{"createdTime":1690084142000,"updatedTime":1690084142000,"contributors":[{"name":"Zzhgitup","email":"99540215+Zzhgitup@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"blog/学习笔记/栈结构+算法.md","localizedDate":"2022年3月3日","excerpt":"<h2> 1.栈（stack）</h2>\\n<figure><img src=\\"https://s2.loli.net/2022/09/16/PSWIgxmMZ4RKpF9.png\\" alt=\\"QQ截图20220916150957.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>QQ截图20220916150957.png</figcaption></figure>\\n<ol>\\n<li>它是一种受限制的线性表，后见先出</li>\\n</ol>\\n<ul>\\n<li>其限制是仅允许在表的一端进行插入和删除操作，这一段被称为<code>栈顶</code>相对地把另一端称为<code>栈底</code></li>\\n<li>LIFO 表示就是后进入的元素，带一个弹出栈空间，类似于自动餐托盘最后放上托盘，往往先拿出去使用</li>\\n<li>向一个栈插入新元素又称作<code>进栈</code>，<code>入栈</code>，或者<code>压栈</code>，他是把新元素放到栈顶元素的上面，使之成为新的栈顶元素</li>\\n<li>从一个栈删除元素又称作<code>出栈</code>，或者<code>退栈</code>，他是把栈顶元素删掉，使其相邻的元素成为新的栈顶元素。</li>\\n</ul>","copyright":{"author":"ZiHao","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{e as data};
