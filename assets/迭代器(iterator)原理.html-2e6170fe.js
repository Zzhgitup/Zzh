import{_ as s,o as n,c as a,f as l,e as o}from"./app-bebbc25d.js";const p={},e=o(`<p><strong>目录</strong></p><p><a href="#1.iterator%E4%BB%8B%E7%BB%8D">1.iterator 介绍    </a></p><p><a href="#2.itertor%E4%BD%9C%E7%94%A8">2.itertor 作用       </a></p><p><a href="#3.iterator%E7%9A%84%E9%81%8D%E5%8E%86%E5%8E%9F%E7%90%86">3.iterator 的遍历原理</a></p><hr><h2 id="_1-iterator-介绍" tabindex="-1"><a class="header-anchor" href="#_1-iterator-介绍" aria-hidden="true">#</a> 1.iterator 介绍</h2><p>iterator 是一种接口，为各种不同数据结构提供一种统一的访问机制，任何数据只要部署 iterator 接口，就可以完成遍历操作，</p><h2 id="_2-itertor-作用" tabindex="-1"><a class="header-anchor" href="#_2-itertor-作用" aria-hidden="true">#</a> <strong>2.itertor 作用</strong></h2><p>iterator 的作用有三个：一是为各种数据结构，提供一个统一的，简便的访问接口；二是使得数据结构的成员能够按照某种次序排列，三是 ES6 创造了一种新的遍历命令 for···of 循环，iterator 接口主要供 for···of 消费</p><h2 id="_3-iterator-的遍历原理" tabindex="-1"><a class="header-anchor" href="#_3-iterator-的遍历原理" aria-hidden="true">#</a> 3.iterator 的遍历原理</h2><p>(1) 创建一个指针对象，指向当前数据结构的起始位置，也就是说，遍历器本质上是一个指针对象</p><p>(2) 第一次调用指针对象的 next  方法     可以将指针指向数据结构的第一个成员</p><p>(3) 第二次调用指针对象的 next 方法     指针对象将指向数据结构的第二个成员</p><p>(4) 不断调用指针对象的 next 方法， 直到它指向数据结构的结束位置，每一次调用 next 方法，都会返回数据结构的当前成员信息，具体来说就是返回一个包含 value 和 done  两个属性的对象其中 value 是当前成员的值，done 属性是一个布尔值   ，表示遍历是否结束</p><p><strong>模拟例子</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">it</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeIterator</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="color:#E5C07B;">it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// { value: undefined, done: true }</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">makeIterator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">array</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nextIndex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">nextIndex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">nextIndex</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>makeIterator 是一个迭代器生成函数，作用就是返回一个遍历器对象，对数组[&#39;a&#39;,&#39;b&#39;]  执行这个函数</p><p>返回该数组的迭代器对象（即指针对象）</p><p>2021 字节跳动 web 工程师笔试题</p><h2 id="第一题" tabindex="-1"><a class="header-anchor" href="#第一题" aria-hidden="true">#</a> 第一题</h2><blockquote><p>[<br> {num: 12, city: ‘beijing’},<br> {num: 56, city: ‘shanghai’},<br> {num: 167, city: ‘guangzhou’},<br> {num: 23, city: ‘shenzhen’},<br> {num: 45, city: ‘caoxian’}<br> ]<br> 写一个方法实现把上面的数组转换成下面这种格式：<br> {beijing: 12, shanghai: 56,…}</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;beijing&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">56</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;shanghai&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">167</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;guangzhou&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;shenzhen&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">45</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;caoxian&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历数组添加到对象就行了</p><p>本周主要进行了复习，对 JS 基础   JS 高级   ES6 进行了回顾   剩余时间在学习 Vue  加油！</p>`,24);function r(t,B){return n(),a("div",null,[l("more"),e])}const i=s(p,[["render",r],["__file","迭代器(iterator)原理.html.vue"]]);export{i as default};
