import{_ as s,o as n,c as a,e as l}from"./app-bebbc25d.js";const p={},o=l(`<h3 id="用简单的流程解释事件循环" tabindex="-1"><a class="header-anchor" href="#用简单的流程解释事件循环" aria-hidden="true">#</a> 用简单的流程解释事件循环</h3><p>在了解什么是事件循环之前我们应该需要先行了解<code>javascript是一个单线程语言</code>和<code>JavaScript的事件分类</code>;</p><h3 id="javascript-是一个单线程语言" tabindex="-1"><a class="header-anchor" href="#javascript-是一个单线程语言" aria-hidden="true">#</a> JavaScript 是一个单线程语言</h3><p>什么是单线程。举个例子：这就好像食堂打饭，需要排队，如果只有一个窗口可以进行打饭，那么就可以看作是单线程，如果有好多个窗口可以进行打饭，这就是多线程<br><code>同理，javascript中的所有任务都只有一条线程在处理。</code></p><p>显然这种机制会造成很多问题，如果一个任务卡死，那么整个都不能运行了，<br> 或者其中有一个任务执行的很慢，那么后面所有的任务都会延迟执行，所以 JS 有了两个任务分类[同步任务]和[异步任务]</p><h3 id="javascript-的任务分类" tabindex="-1"><a class="header-anchor" href="#javascript-的任务分类" aria-hidden="true">#</a> JavaScript 的任务分类</h3><p>接上文，javascript 中饿所有任务被分为同步任务和异步任务两大类<br> 同步任务介绍：就是只要扫描到，就会马上执行的任务（优先于所有异步任务）<br> 异步任务介绍：即使被扫描到，也不会立即执行，而是会被压入异步任务队列，等待主线程中的任务被执行完毕，再被召唤执行</p><p>常见的异步任务有如下几种</p><ol><li>Promise.then() --微任务</li><li>async/await ---Promise 的语法糖 ---微任务</li><li>setTimeOut() ---宏任务</li><li>setInterval() ---宏任务</li><li>.....</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果是 2 1 虽然定时器是 0 秒，但是 setTimeout 是一个异步任务，会等到所有同步任务执行完毕再去执行</p><h3 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h3><p>JavaScript 的异步任务分为宏任务和微任务，</p><p>在异步任务中，有些异步任务的执行周期较长，被列入宏任务队列，有些执行周期较短被列入为任务队列</p><p>两种任务在执行顺序上是不一样的，当有异步任务被压入任务队列时，JavaScript 会将这两种任务放入两个新的任务队列，会优先执行已经存在的微任务，在所有微任务执行完毕之后会执行一个宏任务，注意是一个宏任务，之后再去微任务队列检查是否有未执行的微任务，如果有则全部执行，再回到宏任务队列再执行一个宏任务，依次循环，这套流程被称作事件循环（event loop）</p><figure><img src="https://lmy-1311156074.cos.ap-nanjing.myqcloud.com/test/QQ截图20230325160939.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="来一个例题" tabindex="-1"><a class="header-anchor" href="#来一个例题" aria-hidden="true">#</a> 来一个例题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//异步任务 - 宏任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//同步任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">//异步任务 - 微任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//同步任务</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为 2 6 3 1</p><p>解析参考：</p><p>首先，同步任务必定优先于所有所有异步任务并按顺序执行。所以输出 2 6。</p><p>同步任务执行完毕后，还剩下一个宏任务和一个微任务。</p><p>微任务优先于宏任务执行，所以先输出 3 再输出 1</p><p>得答案：2 6 3 1</p><h3 id="第二题" tabindex="-1"><a class="header-anchor" href="#第二题" aria-hidden="true">#</a> 第二题</h3><figure><img src="https://lmy-1311156074.cos.ap-nanjing.myqcloud.com/test/1090548F591933667F0D8C8224F6DBF2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>来一道难一点的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//第一个宏任务</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//宏任务中的同步任务</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }); </span><span style="color:#7F848E;font-style:italic;">//宏任务中的微任务</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//异步任务 - 宏任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//同步任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">//异步任务 - 微任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//第二个宏任务</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//宏任务中的同步任务</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//宏任务中的宏任务 第四个宏任务</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//第三个宏任务</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }); </span><span style="color:#7F848E;font-style:italic;">//宏任务中的微任务</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//同步任务</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为 2 6 3 1 7 8 4 5</p><p>解析参考：<br> 首先，同步任务必定优先于所有所有异步任务并按顺序执行。所以输出 2 6。<br> 然后同一批次中剩下一个微任务和一个三个宏任务。<br> 因为宏任务必定会在同一批次环境中的微任务全部执行完毕后再执行，所以场上当前批次中唯一一个微任务先执行。输出 3<br> 还剩下三个宏任务。执行第一个宏任务，宏任务中有一个同步任务和一个异步任务。这里要注意两点。</p><p>统一批次宏任务中按顺序执行<br> 一次只执行一个宏任务，然后同步任务当场执行。微任务压入队列。然后就要去检查有没有微任务，有则执行</p><p>所以，第一个宏任务执行的时候，产生了一个同步任务和一个微任务。需要注意,宏任务一次只执行一个。执行完之后发现同步任务当场执行（输出 1），然后查看微任务队列中有没有微任务可以执行。发现有，则执行微任务（输出 7）<br> 然后,才开始执行第二个宏任务。执行第二个宏任务产生了一个同步任务，同步任务当场执行（输出 8），产生一个宏任务（宏任务压入红任务执行队列，也就是所有宏任务之后），按事件循环，再次检查是否存在未执行的微任务，发现没有，不执行。<br> 然后执行第三个宏任务，第三个宏任务中产生一个微任务，按事件循环，再去寻找是否存在未执行的微任务，发现有，则执行（输出 4）<br> 最后执行第四个宏任务（第二个宏任务产生的）。走一遍事件循环的流程，输出 5</p><p><code>事件循环每一次只执行一个宏任务</code> 这个是非常重要的一点</p><figure><img src="https://lmy-1311156074.cos.ap-nanjing.myqcloud.com/test/2871389CC6253FDBDB3DD1B711CA6575.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,34),e=[o];function c(t,r){return n(),a("div",null,e)}const B=s(p,[["render",c],["__file","事件循环EvenLoop.html.vue"]]);export{B as default};
