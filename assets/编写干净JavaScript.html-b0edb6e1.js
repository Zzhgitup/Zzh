const t=JSON.parse('{"key":"v-139c6d44","path":"/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%96%E5%86%99%E5%B9%B2%E5%87%80JavaScript.html","title":"编写干净的JavaScript","lang":"zh-CN","frontmatter":{"title":"编写干净的JavaScript","date":"2023-01-16T08:44:22.000Z","icon":"blog","tag":["javascript"],"category":["记录"],"description":"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。 Bad 👎","head":[["meta",{"property":"og:url","content":"https://oragekk.me/Zzh/blog/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BC%96%E5%86%99%E5%B9%B2%E5%87%80JavaScript.html"}],["meta",{"property":"og:site_name","content":"ZiHao Blog"}],["meta",{"property":"og:title","content":"编写干净的JavaScript"}],["meta",{"property":"og:description","content":"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。 Bad 👎"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-23T03:49:02.000Z"}],["meta",{"property":"article:author","content":"ZiHao"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2023-01-16T08:44:22.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-23T03:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写干净的JavaScript\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-16T08:44:22.000Z\\",\\"dateModified\\":\\"2023-07-23T03:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZiHao\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[],"git":{"createdTime":1690084142000,"updatedTime":1690084142000,"contributors":[{"name":"Zzhgitup","email":"99540215+Zzhgitup@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.97,"words":1791},"filePathRelative":"blog/学习笔记/编写干净JavaScript.md","localizedDate":"2023年1月16日","excerpt":"<p>我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。</p>\\n<p>我们的源代码可读性越强，则：</p>\\n<p>越容易维护<br>\\n新开发人员理解代码所需的时间越少<br>\\n越容易发现哪些代码可以重用<br>\\n在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。</p>\\n<ol>\\n<li>命名<br>\\n不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。<br>\\n如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。<br>\\nBad 👎</li>\\n</ol>","copyright":{"author":"ZiHao","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{t as data};
